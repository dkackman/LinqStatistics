<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//
// THIS FILE IS AUTOGENERATED - DO NOT EDIT
// In order to make changes make sure to edit the t4 template file (*.tt)
//

using System;
using System.Collections.Generic;
using System.Linq;

namespace LinqStatistics
{
    public static partial class EnumerableStats
    {
    <# List<Tuple<string, string>> types = new List<Tuple<string, string>>()
    {
        new Tuple<string, string>("int", "double"),
        new Tuple<string, string>("long", "double"),
        new Tuple<string, string>("decimal", "decimal"),
        new Tuple<string, string>("float", "float"),
        new Tuple<string, string>("double", "double")
    };

    foreach(var type in types)
    {#>	
        /// <summary>
        /// Computes the Median of a sequence of mullable <#= type.Item1 #> values, or null if the source sequence is
        ///     empty or contains only values that are null.
        /// </summary>
        /// <param name="source">A sequence of nullable <#= type.Item1 #> values to calculate the Median of.</param>
        /// <returns>The Median of the sequence of values.</returns>
        public static <#= type.Item2 #>? Median(this IEnumerable<<#= type.Item1 #>?> source)
        {
            var values = source.AllValues();
            if (values.Any())
                return values.Median();

            return null;
        }

        /// <summary>
        /// Computes the Median of a sequence of <#= type.Item1 #> values.
        /// </summary>
        /// <param name="source">A sequence of <#= type.Item1 #> values to calculate the Median of.</param>
        /// <returns>The Median of the sequence of values.</returns>
        public static <#= type.Item2 #> Median(this IEnumerable<<#= type.Item1 #>> source)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            var sortedList = (from number in source
                             orderby number
                             select (<#= type.Item2 #>)number).ToList();

            var count = sortedList.Count;
            int itemIndex = count / 2;

            if (count % 2 == 0)
            {
                // Even number of items.
                return (sortedList[itemIndex] + sortedList[itemIndex - 1]) / (<#= type.Item2 #>)2;
            }

            // Odd number of items.
            return sortedList[itemIndex];
        }

        /// <summary>
        ///     Computes the Median of a sequence of nullable <#= type.Item1 #> values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">A sequence of values to calculate the Median of.</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The Median of the sequence of values.</returns>
        public static <#= type.Item2 #>? Median<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= type.Item1 #>?> selector)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            if (selector == null)
                throw new ArgumentNullException(nameof(selector));

            return source.Select(selector).Median();
        }

        /// <summary>
        ///     Computes the Median of a sequence of <#= type.Item1 #> values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">A sequence of values to calculate the Median of.</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The Median of the sequence of values.</returns>
        public static <#= type.Item2 #> Median<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= type.Item1 #>> selector)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            if (selector == null)
                throw new ArgumentNullException(nameof(selector));

            return source.Select(selector).Median();
        }
 <# } #>
    }
}