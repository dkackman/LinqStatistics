<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//
// THIS FILE IS AUTOGENERATED - DO NOT EDIT
// In order to make changes make sure to edit the t4 template file (*.tt)
//

using System;
using System.Collections.Generic;
using System.Linq;

namespace LinqStatistics
{
    public static partial class EnumerableStats
    {
    <# var types = new List<string>()
    {
        "int", "long", "float", "double", "decimal", "Int128"
    };

    foreach(var type in types)
    {#>	
        /// <summary>
        /// Computes the Range of a sequence of nullable <#= type #> values.
        /// </summary>
        /// <param name="source">The sequence of elements.</param>
        /// <returns>The Range.</returns>
        public static <#= type #>? Range(this IEnumerable<<#= type #>?> source)
        {
            var values = source.AllValues();
            if (values.Any())
                return values.Range();

            return null;
        }

        /// <summary>
        /// Computes the Range of a sequence of <#= type #> values.
        /// </summary>
        /// <param name="source">The sequence of elements.</param>
        /// <returns>The Range.</returns>
        public static <#= type #> Range(this IEnumerable<<#= type #>> source)
        {
            var range = source.MinMax();
            return range.Max - range.Min;
        }

        /// <summary>
        ///     Computes the Range of a sequence of nullable <#= type #> values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">The sequence of elements.</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The Range.</returns>
        public static <#= type #>? Range<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= type #>?> selector)
        {
            ArgumentNullException.ThrowIfNull(source);

            ArgumentNullException.ThrowIfNull(selector);

            return source.Select(selector).Range();
        }

        /// <summary>
        ///     Computes the Range of a sequence of <#= type #> values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">The sequence of elements.</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The Range.</returns>
        public static <#= type #> Range<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= type #>> selector)
        {
            ArgumentNullException.ThrowIfNull(source);

            ArgumentNullException.ThrowIfNull(selector);

            return source.Select(selector).Range();
        }
 <# } #>
    }
}