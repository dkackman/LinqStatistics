<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//
// THIS FILE IS AUTOGENERATED - DO NOT EDIT
// In order to make changes make sure to edit the t4 template file (*.tt)
//

using System;
using System.Collections.Generic;
using System.Linq;

namespace LinqStatistics.NaN
{
    public static partial class EnumerableStats
    {
    <# List<Tuple<string, string>> types = new List<Tuple<string, string>>()
    {
        new Tuple<string, string>("int", "double"),
        new Tuple<string, string>("long", "double"),
        new Tuple<string, string>("float", "float"),
        new Tuple<string, string>("double", "double")
    };

    foreach(var type in types)
    {#>	
        /// <summary>
        /// Computes the sample Kurtosis of a sequence of nullable <#= type.Item1 #> values
        /// </summary>
        /// <param name="source">A sequence of nullable <#= type.Item1 #> values to calculate the Kurtosis of.</param>
        /// <returns>The Kurtosis of the sequence of values.</returns>
        public static <#= type.Item2 #>? KurtosisNaN(this IEnumerable<<#= type.Item1 #>?> source)
        {
            var values = source.AllValues();
            if (values.Any())
                return values.KurtosisNaN();

            return null;
        }

        /// <summary>
        /// Computes the sample Kurtosis of a sequence of <#= type.Item1 #> values
        /// </summary>
        /// <param name="source">A sequence of <#= type.Item1 #> values to calculate the Kurtosis of.</param>
        /// <returns>The Kurtosis of the sequence of values.</returns>
        public static <#= type.Item2 #> KurtosisNaN(this IEnumerable<<#= type.Item1 #>> source)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            var mean = (double)source.AverageNaN();

            if (double.IsNaN(mean))
                return <#= type.Item2 #>.NaN;

            long n = 0;
            var meanv = 0.0;
            var M2 = 0.0;
            var M4 = 0.0;
             
            checked
            { 
                foreach (var x in source)
                {
                    n++;

                    var delta = (double)x - meanv;
                    meanv += delta / n;
                    M2 += delta * ((double)x - meanv);
                    M4 += Math.Pow((double)x - mean, 4);
                }
            }

            if (n < 4)
                return <#= type.Item2 #>.NaN;

            var s = Math.Sqrt((double)(M2 / (n - 1))); // stdev

            double term1 = (n * (n + 1.0)) / ((n - 1.0) * (n - 2.0) * (n - 3.0));
            double term2 = M4 / Math.Pow(s, 4);
            double term3 = (3 * Math.Pow(n - 1, 2)) / ((n - 2.0) * (n - 3.0));

            return (<#= type.Item2 #>)(term1 * term2 - term3);
        }

        /// <summary>
        ///     Computes the sample Kurtosis of a sequence of <#= type.Item1 #> values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">A sequence of values that are used to calculate a Kurtosis</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The Kurtosis of the sequence of values.</returns>
        public static <#= type.Item2 #> KurtosisNaN<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= type.Item1 #>> selector)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            if (selector == null)
                throw new ArgumentNullException(nameof(selector));

            return source.Select(selector).KurtosisNaN();
        }

        /// <summary>
        ///     Computes the sample Kurtosis of a sequence of nullable <#= type.Item1 #> values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">A sequence of values that are used to calculate a Kurtosis</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The Kurtosis of the sequence of values.</returns>
        public static <#= type.Item2 #>? KurtosisNaN<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= type.Item1 #>?> selector)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            if (selector == null)
                throw new ArgumentNullException(nameof(selector));

            return source.Select(selector).KurtosisNaN();
        }
 <# } #>
    }
}