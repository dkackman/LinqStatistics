<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//
// THIS FILE IS AUTOGENERATED - DO NOT EDIT
// In order to make changes make sure to edit the t4 template file (*.tt)
//

using System;
using System.Collections.Generic;
using System.Linq;

namespace LinqStatistics.NaN
{
    /// <summary>
    /// Static class with statistical extension methods for <see cref="IEnumerable{T}"/>
    /// Methods return NaN instead of throwing exceptions in cases that would result in divide by zero
    /// </summary>
    public static partial class EnumerableStats
    {
    <# List<Tuple<string, string>> types = new List<Tuple<string, string>>()
    {
        new Tuple<string, string>("int", "double"),
        new Tuple<string, string>("long", "double"),
        new Tuple<string, string>("float", "float"),
        new Tuple<string, string>("double", "double")
    };

    foreach(var type in types)
    {#>	
        /// <summary>
        /// Computes the sample Average of a sequence of nullable <#= type.Item1 #> values.
        /// </summary>
        /// <param name="source">A sequence of nullable <#= type.Item1 #> values to calculate the Average of.</param>
        /// <returns>       
        ///     The Average of the sequence of values, or null if the source sequence is
        ///     empty or contains only values that are null.
        /// </returns>
        public static <#= type.Item2 #>? AverageNaN(this IEnumerable<<#= type.Item1 #>?> source)
        {
            var values = source.AllValues();
            if (values.Any())
                return values.AverageNaN();
            
            return null;
        }

        /// <summary>
        /// Computes the sample Average of a sequence of <#= type.Item1 #> values.
        /// </summary>
        /// <param name="source">A sequence of <#= type.Item1 #> values to calculate the Average of.</param>
        /// <returns>       
        ///     The Average of the sequence of values.
        /// </returns>
        public static <#= type.Item2 #> AverageNaN(this IEnumerable<<#= type.Item1 #>> source)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            var sum = 0.0;
            long n = 0;
            checked 
            {
                foreach (var v in source) 
                {
                    sum += v;
                    n++;
                }
            }

            return n > 0 ? (<#= type.Item2 #>)(sum / n) : <#= type.Item2 #>.NaN;
        }

        /// <summary>
        /// Computes the sample Average of a sequence of nullable <#= type.Item1 #> values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">The sequence of elements.</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>       
        ///     The Average of the sequence of values.
        /// </returns>
        public static <#= type.Item2 #>? AverageNaN<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= type.Item1 #>?> selector)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            if (selector == null)
                throw new ArgumentNullException(nameof(selector));

            return source.Select(selector).AverageNaN();
        }

        /// <summary>
        /// Computes the sample Average of a sequence of <#= type.Item1 #> values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">The sequence of elements.</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>       
        ///     The Average of the sequence of values.
        /// </returns>
        public static <#= type.Item2 #> AverageNaN<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= type.Item1 #>> selector)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            if (selector == null)
                throw new ArgumentNullException(nameof(selector));

            return source.Select(selector).AverageNaN();
        }
 <# } #>
    }
}