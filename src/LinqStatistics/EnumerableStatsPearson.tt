<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//
// THIS FILE IS AUTOGENERATED - DO NOT EDIT
// In order to make changes make sure to edit the t4 template file (*.tt)
//

using System;
using System.Collections.Generic;
using System.Linq;

namespace LinqStatistics
{
    public static partial class EnumerableStats
    {
    <# List<Tuple<string, string>> types = new List<Tuple<string, string>>()
    {
        new Tuple<string, string>("int", "double"),
        new Tuple<string, string>("long", "double"),
        new Tuple<string, string>("decimal", "decimal"),
        new Tuple<string, string>("float", "float"),
        new Tuple<string, string>("double", "double")
    };

    foreach(var type in types)
    {#>	
        /// <summary>
        /// Computes the Pearson of two sequences of nullable <#= type.Item1 #> values.
        /// </summary>
        /// <param name="source">The first sequence of nullable <#= type.Item1 #> values to calculate the Pearson of.</param>
        /// <param name="other">The second sequence of nullable <#= type.Item1 #> values to calculate the Pearson of.</param>
        /// <returns>The Pearson value of two sequences.</returns>
        /// <remarks>![equation](~/images/pearson.gif)</remarks>
        public static <#= type.Item2 #>? Pearson(this IEnumerable<<#= type.Item1 #>?> source, IEnumerable<<#= type.Item1 #>?> other)
        {
            var values = source.AllValues();
            if (values.Any())
                return values.Pearson(other.AllValues());

            return null;
        }

        /// <summary>
        /// Computes the Pearson of two sequences of <#= type.Item1 #> values.
        /// </summary>
        /// <param name="source">The first sequence of <#= type.Item1 #> values to calculate the Pearson of.</param>
        /// <param name="other">The second sequence of <#= type.Item1 #> values to calculate the Pearson of.</param>
        /// <returns>The Pearson value of two sequences.</returns>
        /// <remarks>![equation](~/images/pearson.gif)</remarks>
        public static <#= type.Item2 #> Pearson(this IEnumerable<<#= type.Item1 #>> source, IEnumerable<<#= type.Item1 #>> other)
        {
            return source.Covariance(other) / (source.StandardDeviationP() * other.StandardDeviationP());
        }

        /// <summary>
        /// Computes the Pearson of the Item values of a sequence of Tuple{<#= type.Item1 #>, <#= type.Item1 #>} values.
        /// </summary>
        /// <param name="source">The type of the Tuple's Items.</param>
        /// <returns>The Pearson value.</returns>
        /// <remarks>![equation](~/images/pearson.gif)</remarks>
        public static <#= type.Item2 #> Pearson(this IEnumerable<Tuple<<#= type.Item1 #>, <#= type.Item1 #>>> source)
        {
            ArgumentNullException.ThrowIfNull(source);

            var x = source.Select(t => t.Item1);
            var y = source.Select(t => t.Item2);

            return x.Covariance(y) / (x.StandardDeviationP() * y.StandardDeviationP());
        }
        
        /// <summary>
        ///     Computes the Pearson of a sequence of nullable <#= type.Item1 #> values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">The first sequence of <#= type.Item1 #> values to calculate the Pearson of.</param>
        /// <param name="other">The second sequence of <#= type.Item1 #> values to calculate the Pearson of.</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The Pearson of the sequence of values.</returns>
        /// <remarks>![equation](~/images/pearson.gif)</remarks>
        public static <#= type.Item2 #>? Pearson<TSource>(this IEnumerable<TSource> source, IEnumerable<TSource> other, Func<TSource, <#= type.Item1 #>?> selector)
        {
            ArgumentNullException.ThrowIfNull(source);

            ArgumentNullException.ThrowIfNull(selector);

            ArgumentNullException.ThrowIfNull(other); 

            return source.Select(selector).Pearson(other.Select(selector));
        }

        /// <summary>
        ///     Computes the Pearson of a sequence of nullable <#= type.Item1 #> values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">The first sequence of <#= type.Item1 #> values to calculate the Pearson of.</param>
        /// <param name="other">The second sequence of <#= type.Item1 #> values to calculate the Pearson of.</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The Pearson of the sequence of values.</returns>
        /// <remarks>![equation](~/images/pearson.gif)</remarks>
        public static <#= type.Item2 #> Pearson<TSource>(this IEnumerable<TSource> source, IEnumerable<TSource> other, Func<TSource, <#= type.Item1 #>> selector)
        {
            ArgumentNullException.ThrowIfNull(source);

            ArgumentNullException.ThrowIfNull(selector);

            ArgumentNullException.ThrowIfNull(other);

            return source.Select(selector).Pearson(other.Select(selector));
        }
 <# } #>
    }
}