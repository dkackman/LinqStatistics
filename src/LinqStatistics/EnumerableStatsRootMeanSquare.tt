<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//
// THIS FILE IS AUTOGENERATED - DO NOT EDIT
// In order to make changes make sure to edit the t4 template file (*.tt)
//

using System;
using System.Collections.Generic;
using System.Linq;

namespace LinqStatistics
{
    public static partial class EnumerableStats
    {
    <# List<Tuple<string, string>> types = new List<Tuple<string, string>>()
    {
        new Tuple<string, string>("int", "double"),
        new Tuple<string, string>("long", "double"),
        new Tuple<string, string>("decimal", "decimal"),
        new Tuple<string, string>("float", "float"),
        new Tuple<string, string>("double", "double")
    };

    foreach(var type in types)
    {#>	
        /// <summary>
        ///     The RootMeanSquare of the sequence of nullable <#= type.Item1 #> values, or null if the source sequence is
        ///     empty or contains only values that are null.
        /// </summary>
        /// <param name="source">A sequence of <#= type.Item1 #> values to calculate the RootMeanSquare of.</param>
        /// <returns>The RootMeanSquare.</returns>
        /// <remarks>![equation](~/images/rms.gif)</remarks>
        public static <#= type.Item2 #>? RootMeanSquare(this IEnumerable<<#= type.Item1 #>?> source)
        {
            var values = source.AllValues();
            if (values.Any())
                return values.RootMeanSquare();

            return null;
        }

        /// <summary>
        ///     The RootMeanSquare of the sequence of <#= type.Item1 #> values.
        /// </summary>
        /// <param name="source">A sequence of <#= type.Item1 #> values to calculate the RootMeanSquare of.</param>
        /// <returns>The RootMeanSquare.</returns>
        /// <remarks>![equation](~/images/rms.gif)</remarks>
        public static <#= type.Item2 #> RootMeanSquare(this IEnumerable<<#= type.Item1 #>> source)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            var s = 0.0;
            long n = 0;

            checked
            { 
                foreach (var d in source)
                {
                    n++;
                    s += Math.Pow((double)d, 2);
                }
            }

            if (n < 1)
                throw new InvalidOperationException("source sequence contains no elements");

            return (<#= type.Item2 #>)Math.Sqrt(s / n);
        }

        /// <summary>
        /// Computes the RootMeanSquare of a sequence of nullable <#= type.Item1 #> values that are obtained
        /// by invoking a transform function on each element of the input sequence.        
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">A sequence of values to calculate the RootMeanSquare of.</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The RootMeanSquare.</returns>
        /// <remarks>![equation](~/images/rms.gif)</remarks>
        public static <#= type.Item2 #>? RootMeanSquare<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= type.Item1 #>?> selector)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            if (selector == null)
                throw new ArgumentNullException(nameof(selector));

            return source.Select(selector).RootMeanSquare();
        }

        /// <summary>
        /// Computes the RootMeanSquare of a sequence of <#= type.Item1 #> values that are obtained
        /// by invoking a transform function on each element of the input sequence.        
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">A sequence of values to calculate the RootMeanSquare of.</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The RootMeanSquare.</returns>
        /// <remarks>![equation](~/images/rms.gif)</remarks>
        public static <#= type.Item2 #> RootMeanSquare<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= type.Item1 #>> selector)
        {
             if (source == null)
                throw new ArgumentNullException(nameof(source));

            if (selector == null)
                throw new ArgumentNullException(nameof(selector));

           return source.Select(selector).RootMeanSquare();
        }
 <# } #>
    }
}